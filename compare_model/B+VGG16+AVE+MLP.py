import torch
import torch.nn as nn
import torch.optim as optim
from torchvision.models import vgg16
from torchvision.transforms import transforms
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from dataloader8 import get_dataloaders  # 确保 dataloader.py 位于同一目录下

class MLPClassifier(nn.Module):
    def __init__(self, input_dim, hidden_dim, num_classes, dropout_rate=0.5):
        super(MLPClassifier, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(dropout_rate)
        self.fc2 = nn.Linear(hidden_dim, num_classes)

    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc2(x)
        return x

# Set basic parameters
num_epochs = 20
batch_size = 32
learning_rate = 2e-5
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Data preprocessing
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Load data
train_loader, test_loader = get_dataloaders('train', 'trainLabels_new.csv', 'test', 'testLabels_new.csv', batch_size, transform)

# Initialize VGG16 model
vgg16_model = vgg16(pretrained=True).features.to(device)
for param in vgg16_model.parameters():
    param.requires_grad = False  # Freeze all parameters in VGG16

# MLP classifier initialization
input_dim = 25088  # VGG16 feature dimension
mlp_classifier = MLPClassifier(input_dim=input_dim, hidden_dim=1024, num_classes=9)
mlp_classifier = nn.DataParallel(mlp_classifier).to(device)  # Enable multi-GPU

# Loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(mlp_classifier.parameters(), lr=learning_rate)

# Training loop
from tqdm import tqdm  # 引入 tqdm

# Training loop
for epoch in range(num_epochs):
    vgg16_model.train()
    mlp_classifier.train()
    train_loop = tqdm(train_loader, leave=True)
    for imgs, labels in train_loop:
        imgs, labels = imgs.to(device), labels.to(device)

        # Extract features using VGG16 and compute the average
        features = []
        for i in range(imgs.size(1)):
            img = imgs[:, i, :, :, :]
            feature = vgg16_model(img)
            feature = feature.view(feature.size(0), -1)
            features.append(feature)
        features = torch.stack(features, dim=0)
        features = torch.mean(features, dim=0)  # Compute the average over the stack

        # Classify using MLP
        outputs = mlp_classifier(features)
        loss = criterion(outputs, labels)

        # Backpropagation and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        train_loop.set_description(f'Epoch [{epoch+1}/{num_epochs}]')
        train_loop.set_postfix(loss=loss.item())

# Evaluate the model
vgg16_model.eval()
mlp_classifier.eval()
all_preds, all_labels = [], []
with torch.no_grad():
    test_loop = tqdm(test_loader, leave=True)
    for imgs, labels in test_loop:
        imgs, labels = imgs.to(device), labels.to(device)

        # Feature extraction and compute the average
        features = []
        for i in range(imgs.size(1)):
            img = imgs[:, i, :, :, :]
            feature = vgg16_model(img)
            feature = feature.view(feature.size(0), -1)
            features.append(feature)
        features = torch.stack(features, dim=0)
        features = torch.mean(features, dim=0)  # Compute the average over the stack

        # Classification
        outputs = mlp_classifier(features)
        _, preds = torch.max(outputs, 1)

        all_preds.extend(preds.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())


# Calculate and print metrics
accuracy = accuracy_score(all_labels, all_preds)
precision = precision_score(all_labels, all_preds, average='macro', zero_division=0)
recall = recall_score(all_labels, all_preds, average='macro', zero_division=0)
f1 = f1_score(all_labels, all_preds, average='macro', zero_division=0)

print(f'Accuracy: {accuracy:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}')
