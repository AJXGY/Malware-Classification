import torch
import torch.nn as nn
import torch.optim as optim
from torchvision.models import vgg16  # 导入VGG16模型
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader
import pandas as pd
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from tqdm import tqdm
from PIL import Image
import os

# 定义数据集类
class CustomDataset(Dataset):
    def __init__(self, folder_path, label_file, transform=None):
        self.folder_path = folder_path
        self.label_file = label_file
        self.transform = transform
        self.labels = pd.read_csv(label_file)

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        img_name = os.path.join(self.folder_path, str(self.labels.iloc[idx, 0]) + '.png')
        image = Image.open(img_name).convert('RGB')
        label = int(self.labels.iloc[idx, 1]-1)

        if self.transform:
            image = self.transform(image)

        return image, label

# 加载数据
train_folder = 'train_asm'
test_folder = 'test_asm'
train_label_file = 'trainLabels_new.csv'
test_label_file = 'testLabels_new.csv'

# 图像预处理
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

train_dataset = CustomDataset(train_folder, train_label_file, transform=transform)
test_dataset = CustomDataset(test_folder, test_label_file, transform=transform)

# 数据加载器
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# 定义VGG16模型
model_vgg = vgg16(pretrained=True)

# 修改VGG16的分类器部分
model_vgg.classifier = nn.Sequential(
    nn.Linear(25088, 4096),
    nn.ReLU(),
    nn.Dropout(0.5),
    nn.Linear(4096, 256),
    nn.ReLU(),
    nn.Dropout(0.5),
    nn.Linear(256, 9)  # 假设有9个类别
)

# 损失函数和优化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model_vgg.parameters(), lr=0.001)

# 将模型移到默认的设备上
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model_vgg.to(device)

# 训练
num_epochs = 30

for epoch in range(num_epochs):
    model_vgg.train()
    running_loss = 0.0
    for images, labels in tqdm(train_loader, desc=f'Epoch {epoch+1}/{num_epochs}', unit='batch'):
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()

        outputs = model_vgg(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item() * images.size(0)

    epoch_loss = running_loss / len(train_dataset)
    print(f'Training Loss: {epoch_loss:.4f}')

    # 在每个epoch结束后评估模型
    model_vgg.eval()
    all_predictions = []
    all_labels = []

    with torch.no_grad():
        for images, labels in tqdm(test_loader, desc='Testing', unit='batch'):
            images, labels = images.to(device), labels.to(device)

            outputs = model_vgg(images)
            _, predicted = torch.max(outputs, 1)

            all_predictions.extend(predicted.cpu().numpy())
            all_labels.extend(labels.cpu().numpy())

    accuracy = accuracy_score(all_labels, all_predictions)
    precision = precision_score(all_labels, all_predictions, average='macro')
    recall = recall_score(all_labels, all_predictions, average='macro')
    f1 = f1_score(all_labels, all_predictions, average='macro')

    print(f'Epoch {epoch+1} Evaluation:')
    print(f'Accuracy: {accuracy:.4f}')
    print(f'Precision: {precision:.4f}')
    print(f'Recall: {recall:.4f}')
    print(f'F1 Score: {f1:.4f}')
# Accuracy: 0.9807
# Precision: 0.9785
# Recall: 0.9439
# F1 Score: 0.9574