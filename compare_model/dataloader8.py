# dataloader8.py
import os
import pandas as pd
from PIL import Image
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms

class MalwareDataset(Dataset):
    def __init__(self, img_dir, labels_csv, transform=None):
        self.img_dir = img_dir
        self.labels_df = pd.read_csv(labels_csv)
        self.transform = transform

    def __len__(self):
        return len(self.labels_df)

    def __getitem__(self, idx):
        img_id = self.labels_df.iloc[idx, 0]
        label = self.labels_df.iloc[idx, 1] - 1  # assuming labels are 1-indexed in csv
        img_folder = os.path.join(self.img_dir, img_id)
        img_paths = [os.path.join(img_folder, f) for f in sorted(os.listdir(img_folder)) if f.endswith('.png')]
        imgs = [Image.open(img_path).convert('RGB') for img_path in img_paths]

        if self.transform:
            imgs = [self.transform(img) for img in imgs]

        imgs_tensor = torch.stack(imgs, dim=0)
        return imgs_tensor, label

def get_dataloaders(train_dir, train_csv, test_dir, test_csv, batch_size, transform, shuffle=True):
    train_dataset = MalwareDataset(train_dir, train_csv, transform)
    test_dataset = MalwareDataset(test_dir, test_csv, transform)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=shuffle)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
    return train_loader, test_loader
