import torch
import torch.nn as nn
import torch.optim as optim
from torchvision.models import vit_l_32
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader
import pandas as pd
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from tqdm import tqdm
from PIL import Image
import os
import logging

# 设置日志记录
logging.basicConfig(filename='training_log.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# 定义数据集类
class CustomDataset(Dataset):
    def __init__(self, folder_path, label_file, transform=None):
        self.folder_path = folder_path
        self.label_file = label_file
        self.transform = transform
        self.labels = pd.read_csv(label_file)

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        img_name = os.path.join(self.folder_path, str(self.labels.iloc[idx, 0]) + '.png')
        image = Image.open(img_name).convert('RGB')
        label = int(self.labels.iloc[idx, 1]-1)

        if self.transform:
            image = self.transform(image)

        return image, label

# 加载数据
train_folder = 'train_asm'
test_folder = 'test_asm'
train_label_file = 'trainLabels_new.csv'
test_label_file = 'testLabels_new.csv'

# 图像预处理
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

train_dataset = CustomDataset(train_folder, train_label_file, transform=transform)
test_dataset = CustomDataset(test_folder, test_label_file, transform=transform)

# 数据加载器
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# 定义ViT模型
model_vit = vit_l_32(pretrained=True)

# 提取特征的MLP
class MLP(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(MLP, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        x = self.fc1(x)
        x = torch.relu(x)
        x = self.fc2(x)
        return x

# 定义模型
input_dim = 1000  # ViT输出的特征维度
hidden_dim = 512
output_dim = 9  # 类别数
mlp_model = MLP(input_dim, hidden_dim, output_dim)

# 损失函数和优化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(mlp_model.parameters(), lr=0.001)

# 将模型和数据移到设备上
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
if torch.cuda.device_count() > 1:
    print("Let's use", torch.cuda.device_count(), "GPUs!")
    mlp_model = nn.DataParallel(mlp_model)
model_vit.to(device)
mlp_model.to(device)

# 训练
num_epochs = 100

for epoch in range(num_epochs):
    mlp_model.train()
    running_loss = 0.0
    for images, labels in tqdm(train_loader, desc=f'Epoch {epoch+1}/{num_epochs}', unit='batch'):
        images, labels = images.to(device), labels.to(device)

        with torch.set_grad_enabled(True):
            features = model_vit(images)
            outputs = mlp_model(features)
            loss = criterion(outputs, labels)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            running_loss += loss.item() * images.size(0)

    epoch_loss = running_loss / len(train_dataset)
    print(f'Training Loss: {epoch_loss:.4f}')
    logging.info(f'Epoch {epoch+1} Training Loss: {epoch_loss:.4f}')

    # Evaluation
    mlp_model.eval()
    all_predictions = []
    all_labels = []

    with torch.no_grad():
        for images, labels in tqdm(test_loader, desc='Testing', unit='batch'):
            images, labels = images.to(device), labels.to(device)

            features = model_vit(images)
            outputs = mlp_model(features)
            _, predicted = torch.max(outputs, 1)

            all_predictions.extend(predicted.cpu().numpy())
            all_labels.extend(labels.cpu().numpy())

    # Calculate evaluation metrics
    accuracy = accuracy_score(all_labels, all_predictions)
    precision = precision_score(all_labels, all_predictions, average='macro')
    recall = recall_score(all_labels, all_predictions, average='macro')
    f1 = f1_score(all_labels, all_predictions, average='macro')

    # Print and write evaluation results to log file
    print(f'Epoch {epoch+1} Evaluation:')
    print(f'Accuracy: {accuracy:.4f}')
    print(f'Precision: {precision:.4f}')
    print(f'Recall: {recall:.4f}')
    print(f'F1 Score: {f1:.4f}')

    logging.info(f'Epoch {epoch+1} Evaluation:')
    logging.info(f'Accuracy: {accuracy:.4f}')
    logging.info(f'Precision: {precision:.4f}')
    logging.info(f'Recall: {recall:.4f}')
    logging.info(f'F1 Score: {f1:.4f}')
