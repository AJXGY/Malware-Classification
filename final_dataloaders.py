# dataloader.py
import os
import pandas as pd
from PIL import Image
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms

class MalwareDataset(Dataset):
    def __init__(self, mal_img_dir, asm_img_dir, labels_csv, transform=None):
        self.mal_img_dir = mal_img_dir
        self.asm_img_dir = asm_img_dir
        self.labels = pd.read_csv(labels_csv)
        self.transform = transform

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        mal_id = self.labels.iloc[idx, 0]
        # 每个恶意软件ID对应的文件夹中的图像路径
        mal_imgs_folder = os.path.join(self.mal_img_dir, mal_id)
        mal_imgs = [os.path.join(mal_imgs_folder, f"{mal_id}{i+1}.png") for i in range(8)]
        asm_img_path = os.path.join(self.asm_img_dir, f"{mal_id}.png")

        mal_imgs = [Image.open(img_path).convert('RGB') for img_path in mal_imgs]
        asm_img = Image.open(asm_img_path).convert('RGB')

        if self.transform:
            mal_imgs = [self.transform(img) for img in mal_imgs]  # 转换每张图像
            asm_img = self.transform(asm_img)

        # 将mal_imgs列表中的图像堆叠为一个张量
        mal_imgs_tensor = torch.stack(mal_imgs, dim=0)

        label = self.labels.iloc[idx, 1] - 1  # 将标签从1-9调整为0-8
        return mal_imgs_tensor, asm_img, label




# 数据预处理转换
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

def get_dataloaders(mal_img_dir, asm_img_dir, labels_csv, batch_size, transform, shuffle=True):
    dataset = MalwareDataset(mal_img_dir, asm_img_dir, labels_csv, transform=transform)
    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=shuffle)
    return dataloader
