import os
import re
import pandas as pd
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor, as_completed

# Extended list of opcodes
opcodes = [
     "cdq", "cld", "cli", "cmc", "cmp", "cwd", "daa", "sti", "stos",
    "sub", "test", "wait", "xchg", "xor", "dd", "dec", "dw", "endp", "faddp",
    "fchs", "fdiv", "fdivr", "fistp", "fld", "fstp", "fword", "fxch", "imul", 
    "in", "inc", "ins", "jb", "je", "jg", "jl", "jmp", "jnb", "jno", "jo", "jz", 
    "lea", "mov", "mul", "not", "or", "out", "outs", "pop", "push", "rcl", "rcr", 
    "rep", "ret", "rol", "ror", "sal", "sar", "sbb", "scas", "shl", "shr", "sidt", 
    "stc", "std", "sti", "stos", "sub", "test", "wait", "xchg"
]

# Pre-compiled regular expressions for opcodes
opcode_patterns = [re.compile(r'\b' + opcode + r'\b', re.IGNORECASE) for opcode in opcodes]

def count_opcodes(file_name):
    with open(file_name, 'r', errors='replace') as f:
        content = f.read()
        result = {"id": os.path.basename(file_name).split('.')[0]}
        for opcode, pattern in zip(opcodes, opcode_patterns):
            matches = pattern.findall(content)
            result["asm_commands_" + opcode] = len(matches)
        result["line_count_asm"] = content.count('\n')
        result["size_asm"] = len(content)
        return result

def process_file(row):
    file_name = 'Big2015/data/' + str(row['Id']) + '.asm'
    if os.path.exists(file_name):
        result = count_opcodes(file_name)
        result['Class'] = row['Class']
        return result
    return None



def main():
    labels_df = pd.read_csv('Labels.csv')
    data_list = []

    with ThreadPoolExecutor(max_workers=os.cpu_count()) as executor:
        futures = {executor.submit(process_file, row): row for _, row in labels_df.iterrows()}
        
        # Set up the progress bar
        progress_bar = tqdm(total=len(labels_df), desc='Processing files')
        
        for future in as_completed(futures):
            result = future.result()
            if result:
                data_list.append(result)
            # Update the progress bar each time a future is completed
            progress_bar.update(1)
        
        # Close the progress bar after all futures are completed
        progress_bar.close()

    output_df = pd.DataFrame(data_list)
    output_df.to_csv("TF/asm_data.csv", index=False)

if __name__ == "__main__":
    main()