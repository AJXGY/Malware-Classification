import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from multiprocessing import Pool

def term_frequency(row):
    total = sum(row)
    if total == 0:
        return [0 for _ in row]
    return [val/total for val in row]

def normalize_and_transform(tf_value):
    normalized_value = int(255 * tf_value)
    transformed_value = int(255 / (normalized_value + 1))
    return transformed_value

def color_mapping(value):
    # 使用归一化和转换后的值来获取颜色
    color = plt.cm.jet(1 - value / 255)  # 反转颜色映射
    return (color[0] * 255, color[1] * 255, color[2] * 255)

def generate_image_subset(data, opcode_columns, output_folder, start_idx, end_idx):
    block_size = 224 // 8
    for index in range(start_idx, min(end_idx, len(data))):
        row = data.iloc[index]
        image = np.zeros((224, 224, 3), dtype=np.uint8)
        tf_values = term_frequency([row[col] for col in opcode_columns])
        transformed_values = [normalize_and_transform(val) for val in tf_values]

        for idx, value in enumerate(transformed_values):
            color = color_mapping(value)
            row_idx = (idx // 8) * block_size
            col_idx = (idx % 8) * block_size
            image[row_idx:row_idx+block_size, col_idx:col_idx+block_size] = color

        filename = os.path.join(output_folder, f"{row['id']}.png")
        plt.imsave(filename, image.astype(np.uint8))

if __name__ == "__main__":
    data = pd.read_csv('TF/asm_data_parallel_multiprocessing.csv')
    output_folder = 'TF/tf_asm_64_png_last'
    if not os.path.exists(output_folder):
        os.mkdir(output_folder)

    opcode_columns = [col for col in data.columns if col.startswith("asm_commands")]
    num_processes = os.cpu_count()
    rows_per_process = len(data) // num_processes
    remainder = len(data) % num_processes  # 计算余数

    ranges = [(i * rows_per_process, (i + 1) * rows_per_process) for i in range(num_processes)]

    # 将余数分配给最后一个进程
    ranges[-1] = (ranges[-1][0], ranges[-1][1] + remainder)

    with Pool(num_processes) as pool:
        tasks = [pool.apply_async(generate_image_subset, 
                                  (data, opcode_columns, output_folder, start, end)) 
                 for start, end in ranges]
        for task in tasks:
            task.get()

