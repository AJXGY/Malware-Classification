import torch
import torch.nn.functional as F
from torch.utils.data import DataLoader
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from tqdm import tqdm

from dataloaders import get_dataloaders  # 确保已经定义了get_dataloaders函数
# 以下假设你已经有了相应的模型定义文件和训练好的模型权重
from vgg_vit_model import VGGViTFeatureExtractor
from vit_model import ViTFeatureExtractor
from fusion import FeatureFusion

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 加载模型
vgg_vit_model = VGGViTFeatureExtractor(pretrained=False).to(device)
vit_model = ViTFeatureExtractor(pretrained=False).to(device)
feature_fusion = FeatureFusion(feature1_dim=1024, feature2_dim=768, output_dim=512).to(device)  # 假定的特征维度

# 加载模型权重（替换为你的模型权重文件路径）
vgg_vit_model.load_state_dict(torch.load("vgg_attention_model.pth"))
vit_model.load_state_dict(torch.load("vit_model.pth"))
feature_fusion.load_state_dict(torch.load("feature_fusion.pth"))

vgg_vit_model.eval()
vit_model.eval()
feature_fusion.eval()

# 加载数据
test_loader = get_dataloaders('../mal_png', '../tf_asm_64_png', '../Labels.csv', batch_size=32, transform, shuffle=False)  # 测试数据

# 初始化评估指标的列表
accuracies, precisions, recalls, f1s = [], [], [], []

with torch.no_grad():
    for data in tqdm(test_loader, desc="Evaluating"):
        mal_imgs, asm_img, labels = data
        mal_imgs = mal_imgs.to(device)
        asm_img = asm_img.to(device)
        labels = labels.to(device)

        # 模型预测
        feature1 = vgg_vit_model(mal_imgs)
        feature2 = vit_model(asm_img)
        final_feature = feature_fusion(feature1, feature2)
        outputs = F.log_softmax(final_feature, dim=1)
        _, predicted = torch.max(outputs, 1)

        # 计算评估指标
        accuracies.append(accuracy_score(labels.cpu(), predicted.cpu()))
        precisions.append(precision_score(labels.cpu(), predicted.cpu(), average='weighted'))
        recalls.append(recall_score(labels.cpu(), predicted.cpu(), average='weighted'))
        f1s.append(f1_score(labels.cpu(), predicted.cpu(), average='weighted'))

# 打印评估结果
print(f"Accuracy: {sum(accuracies)/len(accuracies)}")
print(f"Precision: {sum(precisions)/len(precisions)}")
print(f"Recall: {sum(recalls)/len(recalls)}")
print(f"F1 Score: {sum(f1s)/len(f1s)}")


