# # vit_model.py

# import torch
# import torch.nn as nn
# import torch.nn.functional as F

# class PatchEmbed(nn.Module):
#     def __init__(self, img_size=224, patch_size=16, in_c=3, embed_dim=768):
#         super().__init__()
#         self.img_size = img_size
#         self.patch_size = patch_size
#         self.n_patches = (img_size // patch_size) ** 2
#         self.proj = nn.Conv2d(in_c, embed_dim, kernel_size=patch_size, stride=patch_size)

#     def forward(self, x):
#         x = self.proj(x)  # [B, E, H/P, W/P]
#         x = x.flatten(2)  # [B, E, N]
#         x = x.transpose(1, 2)  # [B, N, E]
#         return x

# class Attention(nn.Module):
#     def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., proj_drop=0.):
#         super().__init__()
#         self.num_heads = num_heads
#         self.scale = (dim // num_heads) ** -0.5
#         self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
#         self.attn_drop = nn.Dropout(attn_drop)
#         self.proj = nn.Linear(dim, dim)
#         self.proj_drop = nn.Dropout(proj_drop)

#     def forward(self, x):
#         B, N, C = x.shape
#         qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
#         q, k, v = qkv.unbind(0)  # [B, heads, N, C//heads]

#         attn = (q @ k.transpose(-2, -1)) * self.scale
#         attn = attn.softmax(dim=-1)
#         attn = self.attn_drop(attn)

#         x = (attn @ v).transpose(1, 2).reshape(B, N, C)
#         x = self.proj(x)
#         x = self.proj_drop(x)
#         return x

# class MLP(nn.Module):
#     def __init__(self, in_features, hidden_features, out_features, act_layer=nn.GELU, drop=0.):
#         super().__init__()
#         self.fc1 = nn.Linear(in_features, hidden_features)
#         self.act = act_layer()
#         self.fc2 = nn.Linear(hidden_features, out_features)
#         self.drop = nn.Dropout(drop)

#     def forward(self, x):
#         x = self.fc1(x)
#         x = self.act(x)
#         x = self.drop(x)
#         x = self.fc2(x)
#         x = self.drop(x)
#         return x

# class Block(nn.Module):
#     def __init__(self, dim, num_heads, mlp_ratio=4.0, qkv_bias=False, drop=0., attn_drop=0.):
#         super().__init__()
#         self.norm1 = nn.LayerNorm(dim)
#         self.attn = Attention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=drop)
#         self.norm2 = nn.LayerNorm(dim)
#         hidden_features = int(dim * mlp_ratio)
#         self.mlp = MLP(in_features=dim, hidden_features=hidden_features, out_features=dim, act_layer=nn.GELU, drop=drop)

#     def forward(self, x):
#         x = x + self.attn(self.norm1(x))
#         x = x + self.mlp(self.norm2(x))
#         return x

# class ViT(nn.Module):
#     def __init__(self, img_size=224, patch_size=16, in_c=3, num_classes=1000, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4.0):
#         super().__init__()
#         self.patch_embed = PatchEmbed(img_size=img_size, patch_size=patch_size, in_c=in_c, embed_dim=embed_dim)
#         self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
#         self.pos_embed = nn.Parameter(torch.zeros(1, 1 + self.patch_embed.n_patches, embed_dim))
#         self.pos_drop = nn.Dropout(p=0.1)
#         self.blocks = nn.ModuleList([
#             Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio) for _ in range(depth)
#         ])
#         self.norm = nn.LayerNorm(embed_dim)
#         self.head = nn.Linear(embed_dim, num_classes)

#     def forward(self, x):
#         B = x.shape[0]
#         x = self.patch_embed(x)
#         cls_token = self.cls_token.expand(B, -1, -1)
#         x = torch.cat((cls_token, x), dim=1)
#         x = x + self.pos_embed
#         x = self.pos_drop(x)

#         for block in self.blocks:
#             x = block(x)

#         x = self.norm(x)
#         x = self.head(x[:, 0])
#         return x

# vit_model.py
import torch
import torch.nn as nn
# from torchvision.models import vit_b_16  # 使用torchvision中的预训练ViT模型
from torchvision.models import vit_l_16 

class ViTFeatureExtractor(nn.Module):
    def __init__(self, pretrained=True):
        super(ViTFeatureExtractor, self).__init__()
        # 加载预训练的ViT模型
        self.vit = vit_l_16(pretrained=pretrained)
        # 移除分类头，我们只需要特征提取部分
        self.vit.head = nn.Identity()  # 注意这里可能需要改为 head 而不是 heads

    def forward(self, x):
        # 前向传播，提取特征
        features = self.vit(x)  # x的形状应为 [batch_size, 3, height, width]
        return features


#feature  32 ,768 