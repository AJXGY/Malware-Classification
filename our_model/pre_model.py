import torch
from torch.utils.data import DataLoader
from torchvision.transforms import transforms
from dataloaders import get_dataloaders
from vgg_attention_model import VGGAttentionModel
from vit_model import ViTFeatureExtractor
from fusion import BilinearAttentionPooling
from mlp_classifier import  MLPClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# 设定设备
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 图片转换
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# 加载测试数据   注意这里用你的绝对路径   你的绝对路径/test    你的绝对路径/test_asm
test_dataloader = get_dataloaders('/home/a19220413/jupyterlab/malware_classfication/test', '/home/a19220413/jupyterlab/malware_classfication/clj/test_asm', 'our_model/testLabels_new.csv', batch_size=32, transform=transform, shuffle=False)

# 加载模型
vgg_attention_model = VGGAttentionModel(pretrained=False).to(device)
vit_model = ViTFeatureExtractor().to(device)
ban_fusion = BilinearAttentionPooling(200704, 1000, 1024).to(device)
mlp_classifier = MLPClassifier(input_size=1024, num_classes=9).to(device)

vgg_attention_model.load_state_dict(torch.load('model_weight/vgg_attention_model_final.pth'))
vit_model.load_state_dict(torch.load('model_weight/vit_model_final.pth'))
ban_fusion.load_state_dict(torch.load('model_weight/ban_fusion_final.pth'))
mlp_classifier.load_state_dict(torch.load('model_weight/mlp_classifier_final.pth'))

# 设置为评估模式
vgg_attention_model.eval()
vit_model.eval()
ban_fusion.eval()
mlp_classifier.eval()

# 测试过程
test_predictions = []
test_labels = []

with torch.no_grad():
    for data in DataLoader(test_dataloader.dataset, batch_size=32, shuffle=False):
        mal_imgs, _, labels = data
        mal_imgs = mal_imgs.to(device)

        features_vit_list = []
        for i in range(mal_imgs.size(1)):
            img = mal_imgs[:, i, :, :, :]
            feature_vit = vit_model(img)
            features_vit_list.append(feature_vit)
        features_vit = torch.mean(torch.stack(features_vit_list), dim=0)
        
        features_vgg = vgg_attention_model(mal_imgs)
        fused_features = ban_fusion(features_vgg, features_vit)
        predictions = mlp_classifier(fused_features)

        _, predicted = torch.max(predictions.data, 1)
        test_predictions.extend(predicted.cpu().numpy())
        test_labels.extend(labels.numpy())  # 确保 labels 是 numpy array

# 计算并打印性能指标
test_accuracy = accuracy_score(test_labels, test_predictions)
test_precision = precision_score(test_labels, test_predictions, average='macro', zero_division=0)
test_recall = recall_score(test_labels, test_predictions, average='macro', zero_division=0)
test_f1 = f1_score(test_labels, test_predictions, average='macro', zero_division=0)

print(f"Test Accuracy: {test_accuracy}")
print(f"Precision: {test_precision}")
print(f"Recall: {test_recall}")
print(f"F1 Score: {test_f1}")
