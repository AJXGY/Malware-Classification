import os
import shutil
import pandas as pd
from sklearn.model_selection import train_test_split

def print_progress(iteration, total, prefix='', suffix='', decimals=1, length=100, fill='█'):
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filled_length = int(length * iteration // total)
    bar = fill * filled_length + '-' * (length - filled_length)
    print(f'\r{prefix} |{bar}| {percent}% {suffix}', end="\r")
    if iteration == total: 
        print()

labels_df = pd.read_csv('Labels.csv')

os.makedirs('train', exist_ok=True)
os.makedirs('test', exist_ok=True)
os.makedirs('train_asm', exist_ok=True)
os.makedirs('test_asm', exist_ok=True)

# 考虑到byte_png下是文件夹，更新total_files计算方式
total_files = sum([len(files) for r, d, files in os.walk('../byte_png')]) + len(os.listdir('TF/tf_asm_64_png_last'))
processed_files = 0

train_labels_list = []
test_labels_list = []

for class_id in labels_df['Class'].unique():
    class_samples = labels_df[labels_df['Class'] == class_id]
    train_samples, test_samples = train_test_split(class_samples, test_size=0.2, random_state=42)

    for _, row in train_samples.iterrows():
        # 处理 byte_png 文件夹
        source_folder_png = os.path.join('../byte_png', row['Id'])
        dest_folder_png = os.path.join('train', row['Id'])
        if os.path.exists(source_folder_png):
            shutil.copytree(source_folder_png, dest_folder_png)
            processed_files += len(os.listdir(source_folder_png))
            print_progress(processed_files, total_files, prefix='进度:', suffix='完成', length=50)
        
        # 处理 tf_asm_64_png 文件
        source_file_asm = os.path.join('TF/tf_asm_64_png_last', row['Id'] + '.png')
        dest_file_asm = os.path.join('train_asm', row['Id'] + '.png')
        if os.path.exists(source_file_asm):
            shutil.copy(source_file_asm, dest_file_asm)
            processed_files += 1
            print_progress(processed_files, total_files, prefix='进度:', suffix='完成', length=50)
        
        train_labels_list.append(row.to_dict())

    for _, row in test_samples.iterrows():
        # 处理 byte_png 文件夹
        source_folder_png = os.path.join('../byte_png', row['Id'])
        dest_folder_png = os.path.join('test', row['Id'])
        if os.path.exists(source_folder_png):
            shutil.copytree(source_folder_png, dest_folder_png)
            processed_files += len(os.listdir(source_folder_png))
            print_progress(processed_files, total_files, prefix='进度:', suffix='完成', length=50)

        # 处理 tf_asm_64_png 文件
        source_file_asm = os.path.join('TF/tf_asm_64_png_last', row['Id'] + '.png')
        dest_file_asm = os.path.join('test_asm', row['Id'] + '.png')
        if os.path.exists(source_file_asm):
            shutil.copy(source_file_asm, dest_file_asm)
            processed_files += 1
            print_progress(processed_files, total_files, prefix='进度:', suffix='完成', length=50)

        test_labels_list.append(row.to_dict())

train_labels_df = pd.DataFrame(train_labels_list)
test_labels_df = pd.DataFrame(test_labels_list)

train_labels_df.to_csv('trainLabels_new.csv', index=False)
test_labels_df.to_csv('testLabels_new.csv', index=False)

print("数据已成功分配到训练集和测试集中，并生成新的标签文件。")
